%fileNames = ["test1.jpg", "test3.jpg","test2.jpg","balls.JPG","test4.jpg","test5.jpg","test6.jpg","test7.jpg","test8.jpg"];

%for i = 1:length(fileNames)
 %   fileName = fileNames(i);
 %   detectHSV(fileName,SAT_TOL,RED,GREEN,BLUE);
 %   w = waitforbuttonpress;
%end 



function [BOT_COORDS] = detectHSV( ) %fileName  %,BLUE_BOT_COORDS_GREEN_BOT_COORDS
SAT_TOL = [0.2,1];
BLUE = [0.5, 0.75]; % between these HUE values
GREEN = [0.25,0.5]; %between these HUE values
RED = [0.05,0.96]; % >=0.95 or =< 0.05
rosshutdown
rosinit("192.168.27.1")
imageTopic = '/camera/color/image_raw';
img_depth = '/camera/depth/image_rect_raw';   
cam_info = '/camera/depth/camera_info';
sub_1 = rossubscriber(imageTopic);
sub_2  = rossubscriber(img_depth);
sub_3 = rossubscriber(cam_info);

imageData = receive(sub_1);
DepthData = receive(sub_2);
info = showdetails(receive(sub_3))
%%
img_color = readImage(imageData);
size(img_color)
img_depth = readImage(DepthData);
%size(img_depth)
imshow(img_color)
%imshow(img_depth)

RGB = "test1.jpg"%img_color %imread(fileName); 
dim = size(img_color)
HSV = rgb2hsv(RGB);
HUE = HSV(:,:,1);
SAT = HSV(:,:,2);
VAL = HSV(:,:,3);
VAL_TOL = [0.8,1];

redMask = (HUE >= RED(1,2)) | (HUE <= RED(1,1)) & (SAT >=SAT_TOL(1,1) & SAT <=SAT_TOL(1,2));
blueMask = (HUE <= BLUE(1,2)) & (HUE >= BLUE(1,1))& (SAT >=SAT_TOL(1,1)&  SAT <=SAT_TOL(1,2)) ;
greenMask = (HUE <= GREEN(1,2)) & (HUE >= GREEN(1,1)) & (SAT >=SAT_TOL(1,1)&  SAT <=SAT_TOL(1,2));
structuringElement = strel('square', 5);
smallestAcceptableArea = 1000;
redMask = cleanHSV(redMask,smallestAcceptableArea,structuringElement);
blueMask = cleanHSV(blueMask,smallestAcceptableArea,structuringElement);
greenMask = cleanHSV(greenMask,smallestAcceptableArea,structuringElement);


masks = [redMask,greenMask,blueMask];
centroids = getCentroids(masks,dim) %obtains the pixel coordiantes of red green and blue blocks
%Red
    if(isnan(centroids(1,1))==false)
        red_depth = img_depth(centroids(1,1),centroids(2,1))    %finds the depth measurement of the red block
        [X,Y,Z] = get_3D_coords(centroids(1,1), centroids(2,1), red_depth) % converts gets the X,Y,Z of the red block in the Robot's coordinate fr
        RED_BOT_COORDS = [X,Y,Z]
    
    end 
    if(isnan(centroids(1,2))==false)
        green_depth = img_depth(centroids(1,2),centroids(2,2))    %finds the depth measurement of the red block
    
        [X,Y,Z] = get_3D_coords(centroids(1,2), centroids(2,2), green_depth) % converts gets the X,Y,Z of the red block in the Robot's coordinate fr
        GREEN_BOT_COORDS = [X,Y,Z]
    end 
    if(isnan(centroids(1,3))==false)
        blue_depth = img_depth(centroids(1,3),centroids(2,3))    %finds the depth measurement of the red block
        [X,Y,Z] = get_3D_coords(centroids(1,3), centroids(2,3), blue_depth) % converts gets the X,Y,Z of the red block in the Robot's coordinate fr
        BLUE_BOT_COORDS = [X,Y,Z]
    end 
BOT_COORDS = [,GREEN_BOT_COORDS]
return 
%green_depth = img_depth(centroids(2,2),centroids(1,2))
%blue_depth = img_depth(centroids(2,3),centroids(1,3))
    




%plotOutput(centroids,masks,RGB,dim);

end 

function[mask] = cleanHSV(mask,smallestAcceptableArea,structuringElement)
mask = bwareaopen(mask, smallestAcceptableArea);
mask  = imclose(mask, structuringElement);
mask = imfill(mask, 'holes');

return
end 

function[centroids] = getCentroids(masks,dim)
centroids = zeros(2,3);
    lower = 1;
    upper = dim(1,2);
for i = 1:3
    masks(1:dim(1,1),lower:upper)
    [y, x] = find( masks(1:dim(1,1),lower:upper));
    centroids(1,i) = round(mean(x));
    centroids(2,i) = round(mean(y));
    lower = upper;
    upper = upper+ dim(1,2);
end 
return 
end 
                                    %in order  RGB
function[] = plotOutput(centroids, masks,RGB,dim)

 subplot(2,2,1)
imshow(RGB); title('Original Image');
axis on 
hold on 

plot(centroids(1,:),centroids(2,:),'w*',MarkerSize=10);
hold off;
subplot(2,2,2),imshow(masks(1:dim(1,1),1:dim(1,2)) ); title('Red block');
subplot(2,2,3),imshow(masks(1:dim(1,1),dim(1,2):dim(1,2)*2)); title('Green block');
subplot(2,2,4),imshow(masks(1:dim(1,1),dim(1,2)*2:dim(1,2)*3) ); title('Blue block');
end 

function[] = plotBoundaries(masks)
[B,L] = bwboundaries(redMask,'noholes');

imshow(label2rgb(L, @jet, [.5 .5 .5]))

for k = 1:length(B)
   boundary = B{k};
   plot(boundary(:,2), boundary(:,1), 'r', 'LineWidth', 2);
end   
 [B,L] = bwboundaries(blueMask,'noholes');
  imshow(label2rgb(L, @jet, [.5 .5 .5]))

end 

function[coord]  = get_3D_coords(x_pixel, y_pixel, depth_measurement)
coords = zeros(1,3)
X = ((x_pixel - 319.239)*int16(depth_measurement))/386.556 
Y = ((y_pixel - 236.959)*int16(depth_measurement))/386.556 
Y_off = 50; % based off measuring centre of end effector to centre of doBot
Z_off = 110; % based off measuring the dobot from bottom of end effector to centre of camera
X_off = 25 ; % based off measuring the left lense of the dobot to the centre of the camera 
BOT_X= ((Y-Y_off)*-1)/1000 %  /1000 converts to metres from mm 
BOT_Y= ((X-X_off)*-1)/1000
BOT_Z= (int16(depth_measurement)-Z_off)/1000 
coords = [BOT_X,BOT_Y,BOT_Z]
return 
end 
